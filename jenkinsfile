pipeline {
    agent {
        label 'Jenkins-slave'
    }

    environment {
        VENV_DIR = 'venv'
        DOCKER_IMAGE = '211125528700.dkr.ecr.us-west-2.amazonaws.com/your-flask-app:latest'
        AWS_REGION = 'us-west-2'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git credentialsId: 'github', url: 'https://github.com/ishaileshmishra/todo-api-flask.git'
                }
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    // Create virtual environment
                    sh "python3 -m venv ${VENV_DIR}"
                    // Activate virtual environment and install dependencies
                    sh """
                        source ${VENV_DIR}/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                    """
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Activate virtual environment and run tests
                    sh """
                        source ${VENV_DIR}/bin/activate
                        # Assuming you have tests configured with pytest
                        pytest
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Log in to AWS ECR and push the image
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin 211125528700.dkr.ecr.us-west-2.amazonaws.com
                        docker push ${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Assuming deployment involves running a Docker container
                    // Customize deployment commands as per your infrastructure
                    sh """
                        docker run -d -p 80:5000 ${DOCKER_IMAGE}
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean up virtual environment and Docker images after the build
            script {
                sh "rm -rf ${VENV_DIR}"
                sh "docker rmi ${DOCKER_IMAGE}"
            }
        }
        success {
            echo 'The build was successful!'
        }
        failure {
            echo 'The build failed.'
        }
    }
}
