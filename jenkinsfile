pipeline {
    agent { label 'agent-1' }  // Use agent-1 for this pipeline

    environment {
       // Define Docker Hub credentials
       DOCKER_USERNAME = 'venkatravi26071994'
       DOCKER_PASSWORD = 'dckr_pat_JTrli2BddxJ6px99ia7M8j0z7K8'
       DOCKER_REPO = 'venkatravi26071994/pythontest'
       TARGET_CONTAINER_NAME = 'target_vm'
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    // Define Docker image name
                    def dockerImage = "${DOCKER_REPO}:${BUILD_NUMBER}"
                    
                    // Build the Docker image
                    sh "docker build -t ${dockerImage} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Define Docker image name
                    def dockerImage = "${DOCKER_REPO}:${BUILD_NUMBER}"
                    
                    // Log in to the Docker registry and push the Docker image
                    sh """
                    echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                    docker push ${dockerImage}
                    """
                }
            }
        }

        stage('Deploy to Target VM') {
            steps {
                script {
                    // Define Docker image name
                    def dockerImage = "${DOCKER_REPO}:${BUILD_NUMBER}"
                    
                    // Deploy the Docker image to the target container
                    sh """
                    docker exec $TARGET_CONTAINER_NAME bash -c '
                    echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin &&
                    docker pull ${dockerImage} &&
                    docker stop rheo-flask-app || true &&
                    docker rm rheo-flask-app || true &&
                    docker run -d --name rheo-flask-app -p 80:80 ${dockerImage}'
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                // Define Docker image name
                def dockerImage = "${DOCKER_REPO}:${BUILD_NUMBER}"
                
                // Clean up Docker images on Jenkins agent after the build
                sh "docker rmi ${dockerImage}"
            }
        }
        success {
            echo 'The build and deployment were successful!'
        }
        failure {
            echo 'The build or deployment failed.'
        }
    }
}
